import tkinter as tk
import tkinter.ttk as ttk 
class TextViewTab():
    
    def __init__(self, notebook, logic_manager):
        self.logic_manager = logic_manager
        self.textmodeframe = tk.Frame(notebook, name = "textmodeframe")
        self.textmodeframe.grid(row = 0, column = 0, sticky = "nsew")
        self.textmodeframe.columnconfigure(0, weight = 1)
        self.textmodeframe.columnconfigure(1, weight = 1)
        self.textmodeframe.rowconfigure(0, weight = 1)
        self.textmodeframe.rowconfigure(1, weight = 1)
        notebook.add(self.textmodeframe, text = "Text Mode")
    
    def create_engine_section(self):
        self.enginelabelframe = ttk.LabelFrame(self.textmodeframe, text = "Engine")
        self.enginelabelframe.grid(column = 0, row = 0, sticky = "nsew")
        self.enginelabelframe.columnconfigure(0, weight = 1, uniform = "label")
        self.enginelabelframe.columnconfigure(1, weight = 1, uniform = "value")
        self.enginelabelframe.columnconfigure(2, weight = 1, uniform = "label")
        self.enginelabelframe.columnconfigure(3, weight = 1, uniform = "value")
        self.enginelabelframe.rowconfigure(0, weight = 1, uniform = "uniform")
        self.enginelabelframe.rowconfigure(1, weight = 1, uniform = "uniform")
        self.enginelabelframe.rowconfigure(2, weight = 1, uniform = "uniform")
        self.enginelabelframe.rowconfigure(3, weight = 1, uniform = "uniform")
        self.enginelabelframe.rowconfigure(4, weight = 1, uniform = "uniform")
        self.enginelabelframe.rowconfigure(5, weight = 1, uniform = "uniform")

    def populate_engine_section(self):
        # Creazione label con nome
        rpmLabel = tk.Label(self.enginelabelframe, text = "RPM: ", font = self.logic_manager.bold)
        tpsLabel = tk.Label(self.enginelabelframe, text = "TPS: ", font = self.logic_manager.bold)
        t_h20Label = tk.Label(self.enginelabelframe, text = "H2O t: ", font = self.logic_manager.bold)
        t_airLabel = tk.Label(self.enginelabelframe, text = "AIR t: ", font = self.logic_manager.bold)
        t_oilLabel = tk.Label(self.enginelabelframe, text = "OIL t: ", font = self.logic_manager.bold)
        vbbLabel = tk.Label(self.enginelabelframe, text = "Vbb: ", font = self.logic_manager.bold)
        lambda1_avgLabel = tk.Label(self.enginelabelframe, text = "λ1 avg: ", font = self.logic_manager.bold)
        lambda1_rawLabel = tk.Label(self.enginelabelframe, text = "λ1: ", font = self.logic_manager.bold)
        k_lambdaLabel = tk.Label(self.enginelabelframe, text = "K λ: ", font = self.logic_manager.bold)
        inj_lowLabel = tk.Label(self.enginelabelframe, text = "Inj L: ", font = self.logic_manager.bold)
        inj_highLabel = tk.Label(self.enginelabelframe, text = "Inj H: ", font = self.logic_manager.bold)
        gearLabel = tk.Label(self.enginelabelframe, text = "Gear: ", font = self.logic_manager.bold)
        # Creazione label con valore
        rpmValue = tk.Label(self.enginelabelframe, textvariable = self.logic_manager.rpm, width = 6)
        tpsValue = tk.Label(self.enginelabelframe, textvariable = self.logic_manager.tps, width = 6)
        t_h20Value = tk.Label(self.enginelabelframe, textvariable = self.logic_manager.t_h20, width = 6)
        t_airValue = tk.Label(self.enginelabelframe, textvariable = self.logic_manager.t_air, width = 6)
        t_oilValue = tk.Label(self.enginelabelframe, textvariable = self.logic_manager.t_oil, width = 6)
        vbbValue = tk.Label(self.enginelabelframe, textvariable = self.logic_manager.vbb, width = 6)
        lambda1_avgValue = tk.Label(self.enginelabelframe, textvariable = self.logic_manager.lambda1_avg, width = 6)
        lambda1_rawValue = tk.Label(self.enginelabelframe, textvariable = self.logic_manager.lambda1_raw, width = 6)
        k_lambdaValue = tk.Label(self.enginelabelframe, textvariable = self.logic_manager.k_lambda1, width = 6)
        inj_lowValue = tk.Label(self.enginelabelframe, textvariable = self.logic_manager.inj_low, width = 6)
        inj_highValue = tk.Label(self.enginelabelframe, textvariable = self.logic_manager.inj_high, width = 6)
        gearValue = tk.Label(self.enginelabelframe, textvariable = self.logic_manager.gear, width = 6)
        # Posizionamento label con nome
        rpmLabel.grid(column = 0, row = 0)
        tpsLabel.grid(column = 0, row = 1)
        t_h20Label.grid(column = 0, row = 2)
        t_airLabel.grid(column = 0, row = 3)
        t_oilLabel.grid(column = 0, row = 4)
        vbbLabel.grid(column = 0, row = 5)
        lambda1_avgLabel.grid(column = 2, row = 0)
        lambda1_rawLabel.grid(column = 2, row = 1)
        k_lambdaLabel.grid(column = 2, row = 2)
        inj_lowLabel.grid(column = 2, row = 3)
        inj_highLabel.grid(column = 2, row = 4)
        gearLabel.grid(column = 2, row = 5)
        # Posizionamento label con valore
        rpmValue.grid(column = 1, row = 0)
        tpsValue.grid(column = 1, row = 1)
        t_h20Value.grid(column = 1, row = 2)
        t_airValue.grid(column = 1, row = 3)
        t_oilValue.grid(column = 1, row = 4)
        vbbValue.grid(column = 1, row = 5)
        lambda1_avgValue.grid(column = 3, row = 0)
        lambda1_rawValue.grid(column = 3, row = 1)
        k_lambdaValue.grid(column = 3, row = 2)
        inj_lowValue.grid(column = 3, row = 3)
        inj_highValue.grid(column = 3, row = 4)
        gearValue.grid(column = 3, row = 5)

    def create_gps_section(self):
        self.gps_section_frame = ttk.LabelFrame(self.textmodeframe, text = "GPS")
        self.gps_section_frame.grid(column = 0, row = 1, sticky = "nsew")
        self.gps_section_frame.columnconfigure(0, weight = 1, uniform = "uniform")
        self.gps_section_frame.columnconfigure(1, weight = 1, uniform = "uniform")
        self.gps_section_frame.columnconfigure(2, weight = 1, uniform = "uniform")
        self.gps_section_frame.columnconfigure(3, weight = 1, uniform = "uniform")
        self.gps_section_frame.rowconfigure(0, weight = 1, uniform = "uniform")
        self.gps_section_frame.rowconfigure(1, weight = 1, uniform = "uniform")
        self.gps_section_frame.rowconfigure(2, weight = 1, uniform = "uniform")
        self.gps_section_frame.rowconfigure(3, weight = 1, uniform = "uniform")
        
    def populate_gps_section(self):
        # Creazione label con nome
        n_sLabel = tk.Label(self.gps_section_frame, text = "n_s", font = self.logic_manager.bold)
        e_wLabel = tk.Label(self.gps_section_frame, text = "e_w", font = self.logic_manager.bold)
        fixQualityLabel = tk.Label(self.gps_section_frame, text = "fixQuality", font = self.logic_manager.bold)
        n_satsLabel = tk.Label(self.gps_section_frame, text = "n_sats", font = self.logic_manager.bold)
        hdopLabel = tk.Label(self.gps_section_frame, text = "hdop", font = self.logic_manager.bold)
        latitudeLabel = tk.Label(self.gps_section_frame, text = "latitude", font = self.logic_manager.bold)
        longitudeLabel = tk.Label(self.gps_section_frame, text = "longitude", font = self.logic_manager.bold)
        velGPSLabel = tk.Label(self.gps_section_frame, text = "velGPS", font = self.logic_manager.bold)
        # Creazione label con valore
        n_sValue = tk.Label(self.gps_section_frame, textvariable = self.logic_manager.n_s, width = 6)
        e_wValue = tk.Label(self.gps_section_frame, textvariable = self.logic_manager.e_w, width = 6)
        fixQualityValue = tk.Label(self.gps_section_frame, textvariable = self.logic_manager.fixQuality, width = 6)
        n_satsValue = tk.Label(self.gps_section_frame, textvariable = self.logic_manager.n_sats, width = 6)
        hdopValue = tk.Label(self.gps_section_frame, textvariable = self.logic_manager.hdop, width = 6)
        latitudeValue = tk.Label(self.gps_section_frame, textvariable = self.logic_manager.latitude, width = 6)
        longitudeValue = tk.Label(self.gps_section_frame, textvariable = self.logic_manager.longitude, width = 6)
        velGPSValue = tk.Label(self.gps_section_frame, textvariable = self.logic_manager.velGPS, width = 6)
        # Posizionamento label con nome
        n_sLabel.grid(column = 0, row = 0)
        e_wLabel.grid(column = 0, row = 1)
        fixQualityLabel.grid(column = 0, row = 2)
        n_satsLabel.grid(column = 0, row = 3)
        hdopLabel.grid(column = 2, row = 0)
        latitudeLabel.grid(column = 2, row = 1)
        longitudeLabel.grid(column = 2, row = 2)
        velGPSLabel.grid(column = 2, row = 3)
        # Posizionamento label con valore
        n_sValue.grid(column = 1, row = 0)
        e_wValue.grid(column = 1, row = 1)
        fixQualityValue.grid(column = 1, row = 2)
        n_satsValue.grid(column = 1, row = 3)
        hdopValue.grid(column = 3, row = 0)
        latitudeValue.grid(column = 3, row = 1)
        longitudeValue.grid(column = 3, row = 2)
        velGPSValue.grid(column = 3, row = 3)

    def create_wheel_section(self):
        self.wheel_section_frame = ttk.LabelFrame(self.textmodeframe, text = "Wheels")
        self.wheel_section_frame.grid(column = 1, row = 0, sticky = "nsew")
        self.wheel_section_frame.columnconfigure(0, weight = 1, uniform = "uniform")
        self.wheel_section_frame.columnconfigure(1, weight = 1, uniform = "uniform")
        self.wheel_section_frame.columnconfigure(2, weight = 1, uniform = "uniform")
        self.wheel_section_frame.columnconfigure(3, weight = 1, uniform = "uniform")
        self.wheel_section_frame.rowconfigure(0, weight = 1, uniform = "uniform")
        self.wheel_section_frame.rowconfigure(1, weight = 1, uniform = "uniform")
        self.wheel_section_frame.rowconfigure(2, weight = 1, uniform = "uniform")
        self.wheel_section_frame.rowconfigure(3, weight = 1, uniform = "uniform")
        self.wheel_section_frame.rowconfigure(4, weight = 1, uniform = "uniform")
        self.wheel_section_frame.rowconfigure(5, weight = 1, uniform = "uniform")
        
    def populate_wheel_section(self):
        # Creazione label con nome
        vel_fsxLabel = tk.Label(self.wheel_section_frame, text = "Vel fsx: ", font = self.logic_manager.bold)
        vel_fdxLabel = tk.Label(self.wheel_section_frame, text = "Vel fdx: ", font = self.logic_manager.bold)
        vel_rsxLabel = tk.Label(self.wheel_section_frame, text = "Vel rsx: ", font = self.logic_manager.bold)
        vel_rdxLabel = tk.Label(self.wheel_section_frame, text = "Vel rdx: ", font = self.logic_manager.bold)
        pot_fdxLabel = tk.Label(self.wheel_section_frame, text = "Pot fdx: ", font = self.logic_manager.bold)
        pot_fsxLabel = tk.Label(self.wheel_section_frame, text = "Pot fsx: ", font = self.logic_manager.bold)
        pot_rdxLabel = tk.Label(self.wheel_section_frame, text = "Pot rdx: ", font = self.logic_manager.bold)
        pot_rsxLabel = tk.Label(self.wheel_section_frame, text = "Pot rsx: ", font = self.logic_manager.bold)
        potFAccuracyLabel = tk.Label(self.wheel_section_frame, text = "pFAcc: ", font = self.logic_manager.bold)
        potRAccuracyLabel = tk.Label(self.wheel_section_frame, text = "pRAcc: ", font = self.logic_manager.bold)
        steeringEncoderLabel = tk.Label(self.wheel_section_frame, text = "Steering: ", font = self.logic_manager.bold)
        # Creazione label con valore
        vel_fsxValue = tk.Label(self.wheel_section_frame, textvariable = self.logic_manager.vel_fsx, width = 6)
        vel_fdxValue = tk.Label(self.wheel_section_frame, textvariable = self.logic_manager.vel_fdx, width = 6)
        vel_rsxValue = tk.Label(self.wheel_section_frame, textvariable = self.logic_manager.vel_rsx, width = 6)
        vel_rdxValue = tk.Label(self.wheel_section_frame, textvariable = self.logic_manager.vel_rdx, width = 6)
        pot_fdxValue = tk.Label(self.wheel_section_frame, textvariable = self.logic_manager.pot_fdx, width = 6)
        pot_fsxValue = tk.Label(self.wheel_section_frame, textvariable = self.logic_manager.pot_fsx, width = 6)
        pot_rdxValue = tk.Label(self.wheel_section_frame, textvariable = self.logic_manager.pot_rdx, width = 6)
        pot_rsxValue = tk.Label(self.wheel_section_frame, textvariable = self.logic_manager.pot_rsx, width = 6)
        potFAccuracyValue = tk.Label(self.wheel_section_frame, textvariable = self.logic_manager.potFAccuracy, width = 6)
        potRAccuracyValue = tk.Label(self.wheel_section_frame, textvariable = self.logic_manager.potRAccuracy, width = 6)
        steeringEncoderValue = tk.Label(self.wheel_section_frame, textvariable = self.logic_manager.steeringEncoder, width = 6)
        # Posizionamento label con nome
        vel_fsxLabel.grid(column = 0, row = 0)
        vel_fdxLabel.grid(column = 0, row = 1)
        vel_rsxLabel.grid(column = 0, row = 2)
        vel_rdxLabel.grid(column = 0, row = 3)
        pot_fdxLabel.grid(column = 0, row = 4)
        pot_fsxLabel.grid(column = 0, row = 5)
        pot_rdxLabel.grid(column = 2, row = 0)
        pot_rsxLabel.grid(column = 2, row = 1)
        potFAccuracyLabel.grid(column = 2, row = 2)
        potRAccuracyLabel.grid(column = 2, row = 3)
        steeringEncoderLabel.grid(column = 2, row = 4)
        # Posizionamento label con valore
        vel_fsxValue.grid(column = 1, row = 0)
        vel_fdxValue.grid(column = 1, row = 1)
        vel_rsxValue.grid(column = 1, row = 2)
        vel_rdxValue.grid(column = 1, row = 3)
        pot_fdxValue.grid(column = 1, row = 4)
        pot_fsxValue.grid(column = 1, row = 5)
        pot_rdxValue.grid(column = 3, row = 0)
        pot_rsxValue.grid(column = 3, row = 1)
        potFAccuracyValue.grid(column = 3, row = 2)
        potRAccuracyValue.grid(column = 3, row = 3)
        steeringEncoderValue.grid(column = 3, row = 4)

    def create_gyro_section(self):
        self.gyro_section_frame = ttk.LabelFrame(self.textmodeframe, text = "Gyroscopes")
        self.gyro_section_frame.grid(column = 1, row = 1, sticky = "nsew")
        self.gyro_section_frame.columnconfigure(0, weight = 1, uniform = "uniform")
        self.gyro_section_frame.columnconfigure(1, weight = 1, uniform = "uniform")
        self.gyro_section_frame.columnconfigure(2, weight = 1, uniform = "uniform")
        self.gyro_section_frame.columnconfigure(3, weight = 1, uniform = "uniform")
        self.gyro_section_frame.rowconfigure(0, weight = 1, uniform = "uniform")
        self.gyro_section_frame.rowconfigure(1, weight = 1, uniform = "uniform")
        self.gyro_section_frame.rowconfigure(2, weight = 1, uniform = "uniform")
        
    def populate_gyro_section(self):
        # Creazione label con nome
        gyro_xLabel = tk.Label(self.gyro_section_frame, text = "gyro_x: ", font = self.logic_manager.bold)
        gyro_yLabel = tk.Label(self.gyro_section_frame, text = "gyro_y: ", font = self.logic_manager.bold)
        gyro_zLabel = tk.Label(self.gyro_section_frame, text = "gyro_z: ", font = self.logic_manager.bold)
        accel_xLabel = tk.Label(self.gyro_section_frame, text = "accel_x: ", font = self.logic_manager.bold)
        accel_yLabel = tk.Label(self.gyro_section_frame, text = "accel_y: ", font = self.logic_manager.bold)
        accel_zLabel = tk.Label(self.gyro_section_frame, text = "accel_z: ", font = self.logic_manager.bold)
        # Creazione label con valore
        gyro_xValue = tk.Label(self.gyro_section_frame, textvariable = self.logic_manager.gyro_x)
        gyro_yValue = tk.Label(self.gyro_section_frame, textvariable = self.logic_manager.gyro_y)
        gyro_zValue = tk.Label(self.gyro_section_frame, textvariable = self.logic_manager.gyro_z)
        accel_xValue = tk.Label(self.gyro_section_frame, textvariable = self.logic_manager.accel_x)
        accel_yValue = tk.Label(self.gyro_section_frame, textvariable = self.logic_manager.accel_y)
        accel_zValue = tk.Label(self.gyro_section_frame, textvariable = self.logic_manager.accel_z)
        # Posizionamento label con nome
        gyro_xLabel.grid(column = 0, row = 0)
        gyro_yLabel.grid(column = 0, row = 1)
        gyro_zLabel.grid(column = 0, row = 2)
        accel_xLabel.grid(column = 2, row = 0)
        accel_yLabel.grid(column = 2, row = 1)
        accel_zLabel.grid(column = 2, row = 2)
        # Posizionamento label con valore
        gyro_xValue.grid(column = 1, row = 0)
        gyro_yValue.grid(column = 1, row = 1)
        gyro_zValue.grid(column = 1, row = 2)
        accel_xValue.grid(column = 3, row = 0)
        accel_yValue.grid(column = 3, row = 1)
        accel_zValue.grid(column = 3, row = 2)

    def build_textviewtab(self):
        TextViewTab.create_engine_section(self)
        TextViewTab.populate_engine_section(self)
        TextViewTab.create_gps_section(self)
        TextViewTab.populate_gps_section(self)
        TextViewTab.create_wheel_section(self)
        TextViewTab.populate_wheel_section(self)
        TextViewTab.create_gyro_section(self)
        TextViewTab.populate_gyro_section(self)