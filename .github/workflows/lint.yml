name: LaTex Cheks 🕵

on:
  issue_comment:
    types: [created]
# on:
#   workflow_dispatch:
#     inputs:
#       root:
#         description: 'Root directory'
#         required: false
#         type: string
# on:
#   pull_request:
#     branches: [master, main]
#     types:
#       - opened
#       - reopened
#       - synchronize


jobs:
#   changed-files:
#     runs-on: ubuntu-latest  # windows-latest || macos-latest
#     name: Looking for changed files 👁
#     outputs:
#       all_changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
#       any_changed: ${{ steps.changed-files.outputs.any_changed }}
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           fetch-depth: 2
#
#       - name: Get changed files
#         id: changed-files
#         uses: tj-actions/changed-files@v37
#         with:
#           files: "**.tex"
#       - run: echo "${{ steps.changed-files.outputs.all_changed_files }}"
#
  preview:
      runs-on: ubuntu-latest
      outputs:
        comment_text: ${{ steps.check.outputs.comment_body }}
        issue: ${{ steps.check.outputs.issue_number }}
        sha: ${{ steps.check.outputs.sha }}
        root: ${{ env.root }}
      steps:
        - uses: lwhiteley/match-comment-phrase-action@v1.5.0
          id: check
          env:
            GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          with:
            phrase: '/check'
            reactions: eyes
            mode: starts_line
        - run: |
            echo 'Found it!'
            echo "root=$(echo ${{ steps.check.outputs.comment_body }} | cut -d ' ' -f 2-)" >> $GITHUB_ENV
          if: steps.check.outputs.match_found == 'true'

  linter:
    needs: preview
    runs-on: ubuntu-latest  # windows-latest || macos-latest
    name: Linter Checker 🖊
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
          ref: ${{ needs.preview.outputs.sha }}

      - name: Install Chktex
        run: sudo apt-get install chktex -y

      - name: Run Chktex
        id: chktex
        run: |
          cd "${{ needs.preview.outputs.root }}"
          find ./ |grep ".tex" | xargs chktex 2>&1 | tee chktexout.txt
          echo "outs=$(< chktexout.txt)" >> $GITHUB_OUTPUT

      - uses: LouisBrunner/checks-action@v1.6.1
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Linter Checker 🖊
          conclusion: ${{ job.status }}
          sha: ${{ needs.preview.outputs.sha }}
          output: |
            {"summary":"${{ steps.chktex.outputs.outs }}"}

  styler:
    needs: preview
    runs-on: ubuntu-latest  # windows-latest || macos-latest
    name: Styler Checker ✨
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
          ref: ${{ needs.preview.outputs.sha }}

      - name: Setupu Java ☕️
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '17'

      - name: Install textidote
        run: wget https://github.com/sylvainhalle/textidote/releases/latest/download/textidote.jar

      - name: Run textidote
        id: textidote
        run: |
          mv textidote.jar "${{ needs.preview.outputs.root }}"
          cd "${{ needs.preview.outputs.root }}"
          java -jar textidote.jar main.tex 2>&1 | tee textidoteout.txt
          #echo "$(< textidoteout.txt)"
          #echo "out='$(< textidoteout.txt)'" >> $GITHUB_OUTPUT
          # echo "out=$(cat out.txt)" >> $GITHUB_ENV

      - run: echo "'$(cat textidoteout.txt)'"
        if: always()

      - uses: LouisBrunner/checks-action@v1.6.1
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Styler Checker ✨
          conclusion: ${{ job.status }}
          sha: ${{ needs.preview.outputs.sha }}
          output: |
            {"summary":"Prova", "text_description": "aa"}
          output_text_description_file: textidoteout.txt

#   
#   typo:
#     needs: changed-files
#     runs-on: ubuntu-latest  # windows-latest || macos-latest
#     name: Typo Checker 🔍
#     if: needs.changed-files.outputs.any_changed == 'true'
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           fetch-depth: 2
#         
#       - name: Setup Java ☕️
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'zulu' # See 'Supported distributions' for available options
#           java-version: '17'
#
#       - name: Install ltex-cli
#         run: wget https://github.com/valentjn/ltex-ls/releases/latest/download/ltex-ls-16.0.0.tar.gz && tar xvf ltex-ls-16.0.0.tar.gz
#
#       - name: Run ltex-cli
#         run: ./ltex-ls-16.0.0/bin/ltex-cli --client-configuration=.github/workflows/ltex.json "${{ needs.changed-files.outputs.all_changed_files }}"
#
    #############################
# Start the job on all push #
#############################
# on:
#   pull_request_target:
#     types:
#       - opened
#       - reopened
#       - synchronize
#     branches:
#       - main
#   # pull_request:
#   #   branches: [master, main]
#
# permissions:
#   checks: write
#   contents: write
#
# jobs:
#   linting:
#     # Name the Job
#     name: Lint Code Base
#     # Set the agent to run on
#     runs-on: ubuntu-latest
#
#     ############################################
#     # Grant status permission for MULTI_STATUS #
#     ############################################
#     permissions:
#       pull-requests: write
#       contents: read
#       packages: read
#       statuses: write
#
#     ##################
#     # Load all steps #
#     ##################
#     steps:
#       ##########################
#       # Checkout the code base #
#       ##########################
#       - name: Checkout Code
#         uses: actions/checkout@v3
#         with:
#           persist-credentials: false
#           repository: ${{ github.event.pull_request.head.repo.full_name }}
#           ref: ${{github.event.pull_request.head.ref}}
#           # Full git history is needed to get a proper
#           # list of changed files within `super-linter`
#           fetch-depth: 2
#
#       - name: Install Lacheck
#         # run: sudo apt-get install lacheck -y
#         run: sudo apt-get install chktex -y
#
#       - name: Get changed files
#         id: changed-files
#         uses: tj-actions/changed-files@v36
#         with:
#           files: "**.tex"
#
#       - name: Run Chktex
#         id: chktex
#         if: steps.changed-files.outputs.any_changed == 'true'
#         continue-on-error: true
#         run: chktex ${{ steps.changed-files.outputs.all_changed_files }} -o lint_error.txt
#
#       - run: ls -a
#
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: "3.10"
#
#       - name: Generate Comments
#         run: python .github/workflows/scripts/latex_commits_hints.py
#
#       # - name: Get Output
#       #   if: failure()
#       #   run: |
#       #     sed -i '1s/^/**Latex Errors**\n\n \`\`\` \n/' lint_error.txt
#       #     # echo "\`\`\` \n" >> lint_error.txt
#       #     #cat lint_error.txt
#
#       - uses: mshick/add-pr-comment@v2
#         # if: failure()
#         with:
#           message-path: out_error.txt
#       # - name: Comment PR
#       #   if: failure()
#       #   uses: thollander/actions-comment-pull-request@v2
#       #   with:
#       #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       #     message: "${cat lint_error.txt}"
#       # message: |
#       #   Hello world ! :wave: ```$(cat lint_error.txt)```
# ###############
# # Set the Job #
# ###############
# # jobs:
# #   build:
# #     # Name the Job
# #     name: Lint Code Base
# #     # Set the agent to run on
# #     runs-on: ubuntu-latest
# #
# #     ############################################
# #     # Grant status permission for MULTI_STATUS #
# #     ############################################
# #     permissions:
# #       contents: read
# #       packages: read
# #       statuses: write
# #
# #     ##################
# #     # Load all steps #
# #     ##################
# #     steps:
# #       ##########################
# #       # Checkout the code base #
# #       ##########################
# #       - name: Checkout Code
# #         uses: actions/checkout@v3
# #         with:
# #           # Full git history is needed to get a proper
# #           # list of changed files within `super-linter`
# #           fetch-depth: 0
# #
# #       ################################
# #       # Run Linter against code base #
# #       ################################
# #       - name: Lint Code Base
# #         id: lint
# #         uses: super-linter/super-linter@v5
# #         env:
# #           VALIDATE_ALL_CODEBASE: false
# #           DEFAULT_BRANCH: main
# #           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
# #           VALIDATE_MARKDOWN: true
# #           VALIDATE_LATEX: true
# #
# #name: Lint
#
# #on:
# # Replace pull_request with pull_request_target if you
# # plan to use this action with forks, see the Limitations section
# #pull_request:
# #branches:
# #- main
# #- develop
#
# # Down scope as necessary via https://docs.github.com/en/actions/security-guides/automatic-token-authentication#modifying-the-permissions-for-the-github_token
# #permissions:
# #checks: write
# #contents: write
#
# #jobs:
# # run-linters:
# #  name: Run linters
# # runs-on: ubuntu-latest
#
# #steps:
# # - name: Check out Git repository
# #  uses: actions/checkout@v3
#
# #      - name: Set up Python 3
# #       uses: actions/setup-python@v4
# #      with:
# #       python-version: '3.11'
# #  - name: Install dependencies
# #   run: |
# #    python -m pip install --upgrade pip
# #   pip install flake8
#
# # - name: Install Node.js dependencies
# #  run: yarn install
#
# # - name: Run linters
# #  uses: wearerequired/lint-action@v2
# # with:
# #  eslint: true
# # eslint_args: "src/**"
# #flake8: true
